// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fury/documents/document.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Document struct {
	Sender         string                  `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipients     []string                `protobuf:"bytes,2,rep,name=recipients,proto3" json:"recipients,omitempty"`
	UUID           string                  `protobuf:"bytes,3,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Metadata       *DocumentMetadata       `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ContentURI     string                  `protobuf:"bytes,5,opt,name=contentURI,proto3" json:"contentURI,omitempty"`
	Checksum       *DocumentChecksum       `protobuf:"bytes,6,opt,name=checksum,proto3" json:"checksum,omitempty"`
	EncryptionData *DocumentEncryptionData `protobuf:"bytes,7,opt,name=encryptionData,proto3,customtype=DocumentEncryptionData" json:"encryptionData,omitempty" yaml:"encryption_data"`
	DoSign         *DocumentDoSign         `protobuf:"bytes,8,opt,name=doSign,proto3,customtype=DocumentDoSign" json:"doSign,omitempty" yaml:"do_sign"`
}

func (m *Document) Reset()         { *m = Document{} }
func (m *Document) String() string { return proto.CompactTextString(m) }
func (*Document) ProtoMessage()    {}
func (*Document) Descriptor() ([]byte, []int) {
	return fileDescriptor_305c7b300b2146f4, []int{0}
}
func (m *Document) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Document) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Document.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Document) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Document.Merge(m, src)
}
func (m *Document) XXX_Size() int {
	return m.Size()
}
func (m *Document) XXX_DiscardUnknown() {
	xxx_messageInfo_Document.DiscardUnknown(m)
}

var xxx_messageInfo_Document proto.InternalMessageInfo

func (m *Document) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Document) GetRecipients() []string {
	if m != nil {
		return m.Recipients
	}
	return nil
}

func (m *Document) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Document) GetMetadata() *DocumentMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Document) GetContentURI() string {
	if m != nil {
		return m.ContentURI
	}
	return ""
}

func (m *Document) GetChecksum() *DocumentChecksum {
	if m != nil {
		return m.Checksum
	}
	return nil
}

func init() {
	proto.RegisterType((*Document)(nil), "tessornetwork.fury.documents.Document")
}

func init() { proto.RegisterFile("fury/documents/document.proto", fileDescriptor_305c7b300b2146f4) }

var fileDescriptor_305c7b300b2146f4 = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x3b, 0xb6, 0xc6, 0x76, 0x84, 0x1e, 0x06, 0x29, 0x43, 0xd1, 0xa4, 0x44, 0x84, 0x80,
	0x92, 0x80, 0x7a, 0x10, 0x8f, 0x35, 0x1e, 0x2a, 0x78, 0x49, 0xe9, 0xc5, 0x4b, 0x49, 0x27, 0x63,
	0x1a, 0x6a, 0x66, 0x42, 0x32, 0x41, 0xf3, 0x2d, 0x3c, 0xe9, 0x57, 0xea, 0xb1, 0x47, 0xf1, 0x10,
	0x96, 0xf6, 0x1b, 0xf4, 0x13, 0x2c, 0x99, 0xa4, 0xd9, 0xa6, 0x6c, 0x77, 0xbb, 0xb7, 0x97, 0x37,
	0xbf, 0xf7, 0xfe, 0xff, 0xf7, 0xf2, 0xe0, 0x8b, 0xef, 0x69, 0x9c, 0x59, 0x1e, 0x27, 0x69, 0x48,
	0x99, 0x48, 0xea, 0xc8, 0x8c, 0x62, 0x2e, 0x38, 0x7a, 0x2e, 0x68, 0x92, 0xf0, 0x98, 0x51, 0xf1,
	0x93, 0xc7, 0x2b, 0xb3, 0x80, 0xcd, 0x1a, 0x1e, 0x3e, 0xf3, 0xb9, 0xcf, 0x25, 0x68, 0x15, 0x51,
	0x59, 0x33, 0x7c, 0x79, 0xa6, 0xa5, 0xcd, 0xa7, 0x81, 0xcf, 0x2a, 0xe8, 0xf5, 0x19, 0xe8, 0x33,
	0x23, 0x71, 0x16, 0x89, 0x80, 0x33, 0xdb, 0x15, 0xee, 0x3d, 0xf0, 0x57, 0x2a, 0x5c, 0xcf, 0x15,
	0xee, 0x94, 0x2c, 0x69, 0x78, 0x80, 0x5f, 0x9d, 0x81, 0x3f, 0x2d, 0x29, 0x59, 0x25, 0x69, 0x58,
	0x62, 0xfa, 0xdf, 0x0e, 0xec, 0xda, 0xd5, 0x13, 0x1a, 0x40, 0x25, 0xa1, 0xcc, 0xa3, 0x31, 0x06,
	0x23, 0x60, 0xf4, 0x9c, 0xea, 0x0b, 0xa9, 0x10, 0xc6, 0x94, 0x04, 0x51, 0x50, 0x74, 0xc2, 0x8f,
	0x46, 0x6d, 0xa3, 0xe7, 0x1c, 0x65, 0x10, 0x82, 0x9d, 0xd9, 0x6c, 0x62, 0xe3, 0xb6, 0xac, 0x92,
	0x31, 0xfa, 0x02, 0xbb, 0x61, 0xe5, 0x0b, 0x77, 0x46, 0xc0, 0x78, 0xfa, 0xd6, 0x34, 0xef, 0xda,
	0xa2, 0x69, 0x9f, 0x4c, 0xe3, 0xd4, 0xf5, 0x85, 0x3e, 0xe1, 0x4c, 0x50, 0x26, 0x66, 0xce, 0x04,
	0x3f, 0x96, 0x2a, 0x47, 0x99, 0x42, 0x8b, 0x54, 0x63, 0x61, 0xe5, 0x21, 0x5a, 0x87, 0x65, 0x38,
	0x75, 0x3d, 0xfa, 0x03, 0x60, 0x9f, 0x36, 0xb6, 0x8f, 0x9f, 0xc8, 0x96, 0xef, 0x2f, 0x6b, 0xd9,
	0xfc, 0x73, 0xe3, 0x0f, 0xeb, 0x5c, 0x03, 0xff, 0x73, 0x6d, 0x70, 0xfb, 0xfb, 0x3e, 0xd7, 0x06,
	0x99, 0x1b, 0xfe, 0xf8, 0xa8, 0xdf, 0x68, 0xce, 0x8b, 0x99, 0x75, 0xe7, 0xc4, 0x05, 0x62, 0x50,
	0xf1, 0xe4, 0xe9, 0xe0, 0xae, 0xf4, 0xf3, 0xe6, 0x32, 0x3f, 0xe5, 0xb9, 0x8d, 0x8d, 0xca, 0x47,
	0xbf, 0x99, 0xdf, 0xe7, 0x5a, 0xbf, 0xd4, 0xf7, 0xf8, 0x3c, 0x09, 0x7c, 0xa6, 0x3b, 0x95, 0xca,
	0x78, 0xb2, 0xde, 0xaa, 0x60, 0xb3, 0x55, 0xc1, 0xd5, 0x56, 0x05, 0xbf, 0x77, 0x6a, 0x6b, 0xb3,
	0x53, 0x5b, 0xff, 0x76, 0x6a, 0xeb, 0x9b, 0xe5, 0x07, 0x62, 0x99, 0x2e, 0x4c, 0xc2, 0x43, 0xab,
	0xe1, 0xc1, 0x92, 0x37, 0xf7, 0xeb, 0xe8, 0xea, 0x44, 0x16, 0xd1, 0x64, 0xa1, 0xc8, 0x5b, 0x7b,
	0x77, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x98, 0xc8, 0x34, 0x3f, 0x66, 0x03, 0x00, 0x00,
}

func (m *Document) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Document) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Document) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DoSign != nil {
		{
			size := m.DoSign.Size()
			i -= size
			if _, err := m.DoSign.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintDocument(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.EncryptionData != nil {
		{
			size := m.EncryptionData.Size()
			i -= size
			if _, err := m.EncryptionData.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintDocument(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Checksum != nil {
		{
			size, err := m.Checksum.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocument(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.ContentURI) > 0 {
		i -= len(m.ContentURI)
		copy(dAtA[i:], m.ContentURI)
		i = encodeVarintDocument(dAtA, i, uint64(len(m.ContentURI)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocument(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintDocument(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Recipients) > 0 {
		for iNdEx := len(m.Recipients) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Recipients[iNdEx])
			copy(dAtA[i:], m.Recipients[iNdEx])
			i = encodeVarintDocument(dAtA, i, uint64(len(m.Recipients[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintDocument(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDocument(dAtA []byte, offset int, v uint64) int {
	offset -= sovDocument(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Document) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovDocument(uint64(l))
	}
	if len(m.Recipients) > 0 {
		for _, s := range m.Recipients {
			l = len(s)
			n += 1 + l + sovDocument(uint64(l))
		}
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovDocument(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovDocument(uint64(l))
	}
	l = len(m.ContentURI)
	if l > 0 {
		n += 1 + l + sovDocument(uint64(l))
	}
	if m.Checksum != nil {
		l = m.Checksum.Size()
		n += 1 + l + sovDocument(uint64(l))
	}
	if m.EncryptionData != nil {
		l = m.EncryptionData.Size()
		n += 1 + l + sovDocument(uint64(l))
	}
	if m.DoSign != nil {
		l = m.DoSign.Size()
		n += 1 + l + sovDocument(uint64(l))
	}
	return n
}

func sovDocument(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDocument(x uint64) (n int) {
	return sovDocument(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Document) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocument
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Document: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Document: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipients", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipients = append(m.Recipients, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &DocumentMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Checksum == nil {
				m.Checksum = &DocumentChecksum{}
			}
			if err := m.Checksum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncryptionData == nil {
				m.EncryptionData = &DocumentEncryptionData{}
			}
			if err := m.EncryptionData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoSign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DoSign == nil {
				m.DoSign = &DocumentDoSign{}
			}
			if err := m.DoSign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocument(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDocument
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDocument(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDocument
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDocument
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDocument
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDocument
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDocument        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDocument          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDocument = fmt.Errorf("proto: unexpected end of group")
)
