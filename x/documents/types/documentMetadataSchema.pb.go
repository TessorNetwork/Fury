// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fury/documents/documentMetadataSchema.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DocumentMetadataSchema struct {
	URI     string `protobuf:"bytes,1,opt,name=URI,proto3" json:"URI,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *DocumentMetadataSchema) Reset()         { *m = DocumentMetadataSchema{} }
func (m *DocumentMetadataSchema) String() string { return proto.CompactTextString(m) }
func (*DocumentMetadataSchema) ProtoMessage()    {}
func (*DocumentMetadataSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfd191f9bcac65e5, []int{0}
}
func (m *DocumentMetadataSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocumentMetadataSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocumentMetadataSchema.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocumentMetadataSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentMetadataSchema.Merge(m, src)
}
func (m *DocumentMetadataSchema) XXX_Size() int {
	return m.Size()
}
func (m *DocumentMetadataSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentMetadataSchema.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentMetadataSchema proto.InternalMessageInfo

func (m *DocumentMetadataSchema) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (m *DocumentMetadataSchema) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type DocumentMetadata struct {
	ContentURI string `protobuf:"bytes,1,opt,name=contentURI,proto3" json:"contentURI,omitempty"`
	// string schemaType = 2;
	Schema *DocumentMetadataSchema `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (m *DocumentMetadata) Reset()         { *m = DocumentMetadata{} }
func (m *DocumentMetadata) String() string { return proto.CompactTextString(m) }
func (*DocumentMetadata) ProtoMessage()    {}
func (*DocumentMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfd191f9bcac65e5, []int{1}
}
func (m *DocumentMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocumentMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocumentMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocumentMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentMetadata.Merge(m, src)
}
func (m *DocumentMetadata) XXX_Size() int {
	return m.Size()
}
func (m *DocumentMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentMetadata proto.InternalMessageInfo

func (m *DocumentMetadata) GetContentURI() string {
	if m != nil {
		return m.ContentURI
	}
	return ""
}

func (m *DocumentMetadata) GetSchema() *DocumentMetadataSchema {
	if m != nil {
		return m.Schema
	}
	return nil
}

func init() {
	proto.RegisterType((*DocumentMetadataSchema)(nil), "tessornetwork.fury.documents.DocumentMetadataSchema")
	proto.RegisterType((*DocumentMetadata)(nil), "tessornetwork.fury.documents.DocumentMetadata")
}

func init() {
	proto.RegisterFile("fury/documents/documentMetadataSchema.proto", fileDescriptor_dfd191f9bcac65e5)
}

var fileDescriptor_dfd191f9bcac65e5 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4f, 0xce, 0xcf, 0xcd,
	0x4d, 0x2d, 0x4a, 0xce, 0xcc, 0xcf, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x4f, 0xc9, 0x4f,
	0x2e, 0xcd, 0x4d, 0xcd, 0x2b, 0x29, 0x86, 0xb3, 0x7c, 0x53, 0x4b, 0x12, 0x53, 0x12, 0x4b, 0x12,
	0x83, 0x93, 0x33, 0x52, 0x73, 0x13, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xb4, 0xd1, 0x35,
	0xea, 0x61, 0x08, 0xc0, 0x4d, 0x92, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0xeb, 0xd3, 0x07, 0xb1,
	0x20, 0x46, 0x28, 0xb9, 0x70, 0x89, 0xb9, 0x60, 0xb5, 0x42, 0x48, 0x80, 0x8b, 0x39, 0x34, 0xc8,
	0x53, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc4, 0x14, 0x92, 0xe0, 0x62, 0x2f, 0x4b, 0x2d,
	0x2a, 0xce, 0xcc, 0xcf, 0x93, 0x60, 0x02, 0x8b, 0xc2, 0xb8, 0x4a, 0xfd, 0x8c, 0x5c, 0x02, 0xe8,
	0xc6, 0x08, 0xc9, 0x71, 0x71, 0x25, 0xe7, 0xe7, 0x95, 0xa4, 0xe6, 0x95, 0x20, 0xcc, 0x41, 0x12,
	0x11, 0x8a, 0xe6, 0x62, 0x2b, 0x06, 0x5b, 0x05, 0x36, 0x8d, 0xdb, 0xc8, 0x59, 0x8f, 0x04, 0xef,
	0xe8, 0x61, 0x77, 0x75, 0x10, 0xd4, 0x48, 0xa7, 0x88, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92,
	0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c,
	0x96, 0x63, 0x88, 0xb2, 0x4b, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0x02, 0x99, 0xad, 0x8f, 0x11, 0xf0,
	0x18, 0x02, 0x15, 0x48, 0x71, 0x51, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x0e, 0x38, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x36, 0xbc, 0x4d, 0x6b, 0xb6, 0x01, 0x00, 0x00,
}

func (m *DocumentMetadataSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentMetadataSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentMetadataSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintDocumentMetadataSchema(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.URI) > 0 {
		i -= len(m.URI)
		copy(dAtA[i:], m.URI)
		i = encodeVarintDocumentMetadataSchema(dAtA, i, uint64(len(m.URI)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DocumentMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Schema != nil {
		{
			size, err := m.Schema.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocumentMetadataSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContentURI) > 0 {
		i -= len(m.ContentURI)
		copy(dAtA[i:], m.ContentURI)
		i = encodeVarintDocumentMetadataSchema(dAtA, i, uint64(len(m.ContentURI)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDocumentMetadataSchema(dAtA []byte, offset int, v uint64) int {
	offset -= sovDocumentMetadataSchema(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DocumentMetadataSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovDocumentMetadataSchema(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovDocumentMetadataSchema(uint64(l))
	}
	return n
}

func (m *DocumentMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContentURI)
	if l > 0 {
		n += 1 + l + sovDocumentMetadataSchema(uint64(l))
	}
	if m.Schema != nil {
		l = m.Schema.Size()
		n += 1 + l + sovDocumentMetadataSchema(uint64(l))
	}
	return n
}

func sovDocumentMetadataSchema(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDocumentMetadataSchema(x uint64) (n int) {
	return sovDocumentMetadataSchema(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DocumentMetadataSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocumentMetadataSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentMetadataSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentMetadataSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocumentMetadataSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocumentMetadataSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocumentMetadataSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocumentMetadataSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocumentMetadataSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocumentMetadataSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocumentMetadataSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDocumentMetadataSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocumentMetadataSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocumentMetadataSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocumentMetadataSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocumentMetadataSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocumentMetadataSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocumentMetadataSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocumentMetadataSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schema == nil {
				m.Schema = &DocumentMetadataSchema{}
			}
			if err := m.Schema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocumentMetadataSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDocumentMetadataSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDocumentMetadataSchema(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDocumentMetadataSchema
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDocumentMetadataSchema
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDocumentMetadataSchema
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDocumentMetadataSchema
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDocumentMetadataSchema
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDocumentMetadataSchema
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDocumentMetadataSchema        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDocumentMetadataSchema          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDocumentMetadataSchema = fmt.Errorf("proto: unexpected end of group")
)
